    @BeforeEach
    void setUp() {
        // Crear cliente 1 con dos órdenes
        //Se crea un cliente o customer
        Customer customer1 = new Customer();
        customer1.setName("Juan Pérez");
        customer1.setEmail("juan@email.com");
        customer1.setOrders(new ArrayList<>());
        entityManager.persist(customer1);

        // Orden más antigua del cliente 1
        //Se crea una orden utilizando los datos del customer1
        Order order1 = new Order();
        order1.setCustomer(customer1);
        order1.setOrderDate(LocalDateTime.now().minusDays(2));//minusDays resta una cantidad tiempo al LocalDateTime.now()
        order1.setStatus("completed");
        order1.setTotalAmount(100.0);
        order1.setOrderItems(new ArrayList<>());
        entityManager.persist(order1);

        //Es el objeto que se está comprando utilizando los datos de la orden
        OrderItem item1 = new OrderItem();
        item1.setOrder(order1);
        item1.setProductName("Producto 1");
        item1.setPrice(50.0);
        item1.setQuantity(2);
        entityManager.persist(item1);

        // Orden más reciente del cliente 1
        // Se está creando una segunda orden con los datos del customer 1 o el primer cliente
        Order order2 = new Order();
        order2.setCustomer(customer1);
        order2.setOrderDate(LocalDateTime.now());
        order2.setStatus("pending");
        order2.setTotalAmount(200.0);
        order2.setOrderItems(new ArrayList<>());
        entityManager.persist(order2);

        //Es el segundo objeto que se está comprando utilizando los datos de la segunda orden
        OrderItem item2 = new OrderItem();
        item2.setOrder(order2);
        item2.setProductName("Producto 2");
        item2.setPrice(100.0);
        item2.setQuantity(2);
        entityManager.persist(item2);

        // Crear cliente 2 con una orden
        //Se está registrando un segundo cliente
        Customer customer2 = new Customer();
        customer2.setName("María García");
        customer2.setEmail("maria@email.com");
        customer2.setOrders(new ArrayList<>());
        entityManager.persist(customer2);

        // CREAR ORDEN 3 CON UNA ORDEN DEL CLIENTE 2
        // SE REGISTRA EL TERCERA ORDEN
        Order order3 = new Order();
        order3.setCustomer(customer2);
        order3.setOrderDate(LocalDateTime.now().minusDays(1));
        order3.setStatus("completed");
        order3.setTotalAmount(150.0);
        order3.setOrderItems(new ArrayList<>());
        entityManager.persist(order3);

        /*SE CREA LA TERCERA ITEM A TRAVES DE LA TERCERA ORDEN
         *SE REGISTRA EL TERCER ITEM
         *
         * - Funcion FLush()
         *  -> garantiza que los datos  esten almacenados temporalmente en un buffer
         *  -> (memoria intermedia) se envíen a su destino final.
         *
         * - funcion persist()
         *  -> generalmente está relacionado con la persistencia de datos, es decir, guardar información de manera permanente
         *  -> en un almacenamiento, como una base de datos o un archivo, para que pueda ser recuperada posteriormente.
         *
         *  -Diferencia entre persist() y merge() en JPA
               -> persist(): Inserta una nueva entidad en el contexto de persistencia y la marca como gestionada.
               -> merge(): Actualiza una entidad existente o la sincroniza con el contexto de persistencia.
         *
         * */
        OrderItem item3 = new OrderItem();
        item3.setOrder(order3);
        item3.setProductName("Producto 3");
        item3.setPrice(75.0);
        item3.setQuantity(2);
        entityManager.persist(item3);

        entityManager.flush();
    }